---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Welcome to Astro.">
  <main>
    <h1>Welcome to <span class="text-gradient">Astro</span></h1>
    <p class="instructions">
      To get started, open the directory <code>src/pages</code> in your project.<br
      />
      <strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
    </p>
    
    <!-- <ul role="list" class="link-card-grid"> -->
      <Card
        href="https://docs.astro.build/"
        title="01"
        body="El Tao que puede ser expresado no es el verdadero Tao. El nombre que se le puede dar no es su verdadero nombre. Sin nombre es el principio del universo; y con nombre, es la madre de todas las cosas. Desde el no-ser comprendemos su esencia; y desde el ser, sólo vemos su apariencia. Ambas cosas, ser y no-ser, tienen el mismo origen, aunque distinto nombre. Su identidad es el misterio. Y en este misterio Se halla la puerta de toda maravilla."
      />
      <Card
        href="https://astro.build/integrations/"
        title="02"
        body="Todo el mundo toma lo bello por lo bello, y por eso conocemos qué es lo feo. Todo el mundo toma el bien por el bien, y por eso conocen qué es el mal. Porque, el ser y el no-ser se engendran mutuamente. Lo fácil y lo difícil se complementan. Lo largo y lo corto se forman el uno de otro. Lo alto y lo bajo se aproximan. El sonido y el tono armonizan entre sí. El antes y el después se suceden recíprocamente. Por eso, el sabio adopta la actitud de no-obrar y practica sin palabras. Todas las cosas aparecen sin su intervención. Nada usurpa ni nada rehúsa, ni se atribuye la obra acabada, y por eso, su obra permanece con él"
      />
      <Card
        href="https://astro.build/themes/"
        title="03"
        body="No ensalzar los talentos para que el pueblo no compita. No estimar lo que es difícil de adquirir para que el pueblo no se haga ladrón. No mostrar lo codiciable para que su corazón no se ofusque. El sabio gobierna de modo que vacía el corazón, llena el vientre, debilita la ambición, y fortalece los huesos. Así evita que el pueblo tenga saber ni deseos, para que los más astutos no busquen su triunfo. Quién practica el no-obrar todo lo gobierna."
      />
      <Card
        href="https://astro.build/chat/"
        title="04"
        body="El Tao es vacío, imposible de colmar, y por eso, inagotable en su acción. En su profundidad reside el origen de todas las cosas. Suaviza sus asperezas, disuelve la confusión, atempera su esplendor, y se identifica con el polvo. Por su profundidad parece ser eterno. No sé quién lo concibió, pero es más antiguo que los dioses."
      />
    <!-- </ul> -->
    <!-- <ul role="list" class="link-card-grid"> -->
      <Card
        href="https://docs.astro.build/"
        title="05"
        body="El universo no tiene sentimientos; todas las cosas son para él como perros de paja. El sabio no tiene sentimientos; el pueblo es para él como un perro de paja. El universo es como un fuelle, vacío, pero nunca agotado. Cuanto más se mueve, más produce. Quien más habla menos le comprende Es mejor incluirse en él."
      />
      <Card
        href="https://astro.build/integrations/"
        title="06"
        body="El espíritu del valle no muere. Es la hembra misteriosa. La puerta de lo misterioso femenino es la raíz del universo. Ininterrumpidamente, prosigue su obra sin fatiga"
      />
      <Card
        href="https://astro.build/themes/"
        title="07"
        body="El cielo es eterno y la tierra permanece. El cielo y la tierra deben su eterna duración a que no hacen de sí mismos la razón de su existencia. Por ello son eternos. El sabio se mantiene rezagado y así es antepuesto. Excluye su persona y su persona se conserva. Porque es desinteresado obtiene su propio bien."
      />
      <Card
        href="https://astro.build/chat/"
        title="08"
        body="La suprema bondad es como el agua. El agua todo lo favorece y a nada combate. Se mantiene en los lugares que más desprecia el hombre y, así, está muy cerca del Tao. Por esto, la suprema bondad es tal que, su lugar es adecuado. Su corazón es profundo. Su espíritu es generoso. Su palabra es veraz. Su gobierno es justo. Su trabajo es perfecto. Su acción es oportuna. Y no combatiendo con nadie, nada se le reprocha."
      />
    <!-- </ul> -->
    <p class="instructions">
      To get started, open the directory <code>src/pages</code> in your project.<br
      />
      <strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
    </p>
    <ul role="list" class="link-card-grid">
      <Card
        href="https://docs.astro.build/"
        title="Documentation"
        body="Assta"
      />
      <Card
        href="https://astro.build/integrations/"
        title="Integrations"
        body="Supercharge your project with new frameworks and libraries."
      />
      <Card
        href="https://astro.build/themes/"
        title="Themes"
        body="Explore a galaxy of community-built starter themes."
      />
      <Card
        href="https://astro.build/chat/"
        title="Community"
        body="Come say hi to our amazing Discord community. ❤️"
      />
    </ul>

    <h1>This is section <span class="text-gradient">2</span></h1>
    <p class="instructions">
      To get started, open the directory <code>src/pages</code> in your project.<br
      />
      <strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
    </p>
    <!-- <ul role="list" class="link-card-grid"> -->
      <Card
        href="https://docs.astro.build/"
        title="Documentation"
        body="Learn how Astro works and explore the official API docs."
      />
      <Card
        href="https://astro.build/integrations/"
        title="Integrations"
        body="Supercharge your project with new frameworks and libraries."
      />
      <Card
        href="https://astro.build/themes/"
        title="Themes"
        body="Explore a galaxy of community-built starter themes."
      />
      <Card
        href="https://astro.build/chat/"
        title="Community"
        body="Come say hi to our amazing Discord community. ❤️"
      />
    <!-- </ul> -->
    <ul role="list" class="link-card-grid">
      <Card
        href="https://docs.astro.build/"
        title="Documentation"
        body="Learn how Astro works and explore the official API docs."
      />
      <Card
        href="https://astro.build/integrations/"
        title="Integrations"
        body="Supercharge your project with new frameworks and libraries."
      />
      <Card
        href="https://astro.build/themes/"
        title="Themes"
        body="Explore a galaxy of community-built starter themes."
      />
      <Card
        href="https://astro.build/chat/"
        title="Community"
        body="Come say hi to our amazing Discord community. ❤️"
      />
    </ul>

    <h1>This is section <span class="text-gradient">2</span></h1>
    <p class="instructions">
      To get started, open the directory <code>src/pages</code> in your project.<br
      />
      <strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
    </p>
    <ul role="list" class="link-card-grid">
      <Card
        href="https://docs.astro.build/"
        title="Documentation"
        body="Learn how Astro works and explore the official API docs."
      />
      <Card
        href="https://astro.build/integrations/"
        title="Integrations"
        body="Supercharge your project with new frameworks and libraries."
      />
      <Card
        href="https://astro.build/themes/"
        title="Themes"
        body="Explore a galaxy of community-built starter themes."
      />
      <Card
        href="https://astro.build/chat/"
        title="Community"
        body="Come say hi to our amazing Discord community. ❤️"
      />
    </ul>
    <ul role="list" class="link-card-grid">
      <Card
        href="https://docs.astro.build/"
        title="Documentation"
        body="Learn how Astro works and explore the official API docs."
      />
      <Card
        href="https://astro.build/integrations/"
        title="Integrations"
        body="Supercharge your project with new frameworks and libraries."
      />
      <Card
        href="https://astro.build/themes/"
        title="Themes"
        body="Explore a galaxy of community-built starter themes."
      />
      <Card
        href="https://astro.build/chat/"
        title="Community"
        body="Come say hi to our amazing Discord community. ❤️"
      />
    </ul>
    <!-- <div>
		<img src="https://unsplash.it/250/250/?random" alt="" />

	</div>
	<div>
		<img src="https://unsplash.it/250/250/?random" alt="" />

	</div> -->
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
<script>
  const afterBg = document.createElement("div");
  afterBg.style.backgroundImage =
    "url(https://4.bp.blogspot.com/-hbkuNamoPek/Vi_AJwOLDaI/AAAAAAAAAb0/HfHBeoLlkAE/s1600/IMG_4542.JPG)";
  // afterBg.style.backgroundSize = "contain";
  afterBg.style.backgroundPosition = "center";
  afterBg.style.backgroundRepeat = "no-repeat";
  afterBg.style.position = "fixed";
  afterBg.style.top = "-10vh";
  afterBg.style.left = "2vw";
  afterBg.style.content = " ";
  afterBg.style.width = "100vw";
  afterBg.style.height = "100vh";
  afterBg.style.mixBlendMode = "color-burn";
  afterBg.style.opacity = "0.2";
  document.body.style.overflowX = "hidden";
  // document.body.after(afterBg);

  // setTimeout(() => {
  document.querySelector("main")!;

  const halfWidth = window.innerWidth / 2;

  let scrollHeight = 0;
  let viewHeight = 0;
  let scrolled = 0.001;
  let rotationMlr = 0;
  let centerMlr = scrollHeight / 100;
  let baseRotate = 55;

  document.body.style.height = `${document.body.scrollHeight}px`;
  const nodes_data: { node: Node; coords: any }[] = [];
  const totalNodes = document.querySelector("main")?.childNodes.length;

  function getNodeMetadata(coords: any, i: number, initial?: boolean) {
    const persp = (coords.y / scrollHeight) * 100;
    const scale =
      (persp - 100) * -1 - ((initial ? i || 1 : 5) * 100) / totalNodes!;
    const trans = (((coords.width + coords.y * 1) - halfWidth) / scrollHeight) * 100;
    return { persp, scale, trans };
  }

  function updateNodeRules(el: any, i: number, md: any, scroll?: boolean) {
    let isInitialSet = ((i || 1) / totalNodes!) * 100 <= rotationMlr && i < 2;
    let preBR = !scroll ? false : scrolled > rotationMlr;

    // if (scroll) {
      rotationMlr = ((i || 1) / totalNodes!) * 100;
      isInitialSet = rotationMlr <= rotationMlr && i < 2;
      preBR = scrolled > rotationMlr;
      // baseRotate = isInitialSet ? 65 : preBR ? 90 - (marginScrolled - rotationMlr + 10) > 65 ? 90 - (marginScrolled - rotationMlr + 10) : 65: 90
    // }
    (el.node as HTMLElement).style.opacity = `${
      isInitialSet ? 1 : preBR ? 1 : 0
    }`;
    (el.node as HTMLElement).style.scale = `${
       md.scale + (scrolled * 2)
    }%`;
    (el.node as HTMLElement).style.pointerEvents = `${
      isInitialSet ? "auto" : preBR ? "auto" : "none"
    }`;
    (el.node as HTMLElement).style.zIndex = `${i || 1}`;
    (el.node as HTMLElement).style.transform = `perspective(${
      viewHeight - 100
    }px) rotateY(${i % 2 == 0 ? baseRotate : baseRotate * -1}deg)`;
    if (i % 2 == 0) setLeftNodeRules(el, md);
    if (i % 2 != 0) setRightNodeRules(el, md);
  }

  function setLeftNodeRules(el: any, md: any) {
    (el.node as HTMLElement).style.translate = `${
      (((md.trans - 100) * -1) -
      centerMlr +
      (scrolled * 2)  +
      ((el.coords.width / 2) / (innerWidth)) * 100 -
      (halfWidth / innerWidth) * 100) * -1
    }vw 0px`;
  }
  function setRightNodeRules(el: any, md: any) {
    (el.node as HTMLElement).style.translate = `${
      (((md.trans - 100) * -1) -
      centerMlr +
      (scrolled * 2)  +
      ((el.coords.width / 2) / innerWidth) * 100 -
      (halfWidth / innerWidth) * 100) * 1
    }vw 0px`;
  }

  // SETUP TUNEL #####################################
  if (
    document.querySelector("main") &&
    document.querySelector("main")?.hasChildNodes() &&
    true
  ) {
    document.body.style.height = `${document.body.scrollHeight}px`;
    const nodes = Array.from(document.querySelector("main")!.childNodes).filter(
      (el) => !["#text", "#comment"].some((e) => e == el.nodeName)
    );
    nodes.forEach((el: any) => {
      const coords = (el as HTMLElement).getBoundingClientRect();
      nodes_data.push({ node: el, coords: coords });
    });
    await new Promise((resolve) => setTimeout(resolve, 100));
    scrollHeight = document.body.scrollHeight;
    viewHeight = window.innerHeight;
    scrolled = window.scrollY || 0.001;
    centerMlr = scrollHeight / 100;
    rotationMlr = (scrollHeight / totalNodes! / window.innerWidth) * 100; // % INITIAL AMOUNT ELEMENTS

    nodes_data.forEach((el: any, i: number) => {
      // Common Initial rules.
      (el.node as HTMLElement).style.transition = "0.3s";
      (el.node as HTMLElement).style.position = "fixed";
      (el.node as HTMLElement).style.top = `${
        viewHeight / 2 - el.coords.height / 2
      }px`;
      // Generate Node's Metadata.
      const md = getNodeMetadata(el.coords, i, true);
      updateNodeRules(el, i, md);
    });
  }

  document.addEventListener("scroll", () => {
    scrolled = ((window.scrollY / scrollHeight) * 100) | 0.001;
    nodes_data.forEach((el: any, i: number) => {
      const md = getNodeMetadata(el.coords, i);
      updateNodeRules(el, i, md, true);
    });
  });

  // MOUSE EVENTS ###################################
  let lastNodeHover: { index: any; node: any; coords: any; timestamp: any } = {
    index: -1,
    node: null,
    coords: null,
    timestamp: -1,
  };
  let nodeHovered = false;
  nodes_data.forEach((el, i) => {
    (el.node as HTMLElement).addEventListener("mouseover", () => {
      if (nodeHovered) return;
      if (!(lastNodeHover?.index != i)) return;
      if (
        lastNodeHover &&
        lastNodeHover.timestamp > new Date().getTime() + 1000
      ) {
      }
      nodeHovered = true;
      if (lastNodeHover && lastNodeHover.index != i)
        lastNodeHover = {
          index: i,
          node: el.node,
          coords: (el.node as HTMLElement).style.translate,
          timestamp: new Date().getTime(),
        };
      (
        el.node as HTMLElement
      ).style.transform = `perspective(${viewHeight}px) rotateY(${0}deg)`;
      (el.node as HTMLElement).style.translate = `0px 0px`;
    });
    (el.node as HTMLElement).addEventListener("mouseleave", async () => {
      if (lastNodeHover && lastNodeHover.timestamp > new Date().getTime() - 500)
        return;
      await new Promise((resolve) => setTimeout(resolve, 500));
      (el.node as HTMLElement).style.transform = `perspective(${
        viewHeight - 100
      }px) rotateY(${i % 2 == 0 ? baseRotate : baseRotate * -1}deg)`;
      if (i % 2 == 0) setLeftNodeRules(el, getNodeMetadata(el.coords, i));
      if (i % 2 != 0) setRightNodeRules(el, getNodeMetadata(el.coords, i));
      lastNodeHover = { index: -1, node: null, coords: null, timestamp: -1 };
      nodeHovered = false;
    });
  });
  // }, 0);
</script>
